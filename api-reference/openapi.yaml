openapi: 3.1.0
info:
  title: Influship External API
  version: 0.1.0
  description: |
    Public API for influencer search, enrichment, match scoring, and post analysis.

    ## Features

    - **Creator Search**: Find influencers using natural language queries with AI-powered recommendations
    - **Profile Enrichment**: Get detailed creator profiles with engagement metrics and contact information
    - **Match Scoring**: AI-powered creator-campaign matching with detailed explanations
    - **Post Analysis**: Analyze individual posts for content insights and brand safety
    - **Brand Safety**: Comprehensive brand safety evaluation for creators and content

    ## Platform Support

    Currently supports Instagram only. Additional platforms coming soon.

    ## Data Formats

    - Engagement rates: 0.0 to 1.0 (float)
    - Match scores: 0.0 to 1.0 (float)
    - All timestamps: ISO 8601 format
servers:
  - url: http://localhost:8080
    description: Local Development
  - url: https://api.influship.com
    description: Production
paths:
  /health:
    get:
      summary: Health check
      operationId: health
      x-mint:
        metadata:
          title: 'Health Check'
          description: 'Check if the API service is running and healthy'
        content: |
          ## Overview

          This endpoint provides a simple health check to verify that the API service is running and responsive.

          <Note>
          This endpoint does not require authentication and can be used for monitoring and load balancer health checks.
          </Note>
        mcp:
          enabled: true
          name: 'health_check'
          description: 'Check if the Influship API service is running and healthy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true

  /v1/search:
    post:
      tags: [Search]
      summary: Search creators
      description: |
        Returns ranked creators with basic fields and AI recommendation context. No emails are returned.
        Hidden creators are excluded from search results.
      operationId: searchCreators
      x-mint:
        metadata:
          title: 'Search Creators'
          description: 'Find and rank creators based on search criteria with AI-powered recommendations'
        content: |
          ## Overview

          Search for creators using natural language queries and filters. The API returns ranked results with AI-generated recommendations and engagement metrics.

          <Warning>
          This endpoint requires authentication via API key. Hidden creators are automatically excluded from search results.
          </Warning>

          ## Search Modes

          - **lite**: Returns basic profile information (default)
          - **rich**: Includes additional metrics like recent posting frequency

          ## Result Scope

          - **seed_platform**: Returns only the requested platform data
          - **all_platforms**: Returns all known platform data (currently 1x multiplier)
        mcp:
          enabled: true
          name: 'search_creators'
          description: 'Search for creators using natural language queries and filters with AI-powered recommendations'
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          headers:
            RateLimit-Limit:
              $ref: '#/components/headers/RateLimit-Limit'
            RateLimit-Remaining:
              $ref: '#/components/headers/RateLimit-Remaining'
            RateLimit-Reset:
              $ref: '#/components/headers/RateLimit-Reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }

  /v1/profiles/{platform}/{username}:
    get:
      tags: [Enrichment]
      summary: Get platform-specific profile by handle
      operationId: getProfileByHandle
      description: |
        Returns a single platform profile for the specified username.
        Hidden policy: detailed mode excludes hidden creators (404), but lite mode returns profiles even if hidden, to support enrichment (lite) use-cases.
      x-mint:
        metadata:
          title: 'Get Profile by Handle'
          description: 'Retrieve a platform-specific profile using username'
        content: |
          ## Overview

          Get detailed profile information for a specific creator by their platform username.

          <Info>
          **Hidden Creator Policy**: 
          - **Lite mode**: Returns profiles even if hidden (for enrichment use cases)
          - **Detailed mode**: Returns 404 for hidden creators
          </Info>

          ## Live Mode

          When `live=true`, the API fetches fresh data from the platform instead of using cached data. This is slower and costs more but provides the most up-to-date information.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: platform
          in: path
          required: true
          schema: { $ref: '#/components/schemas/Platform' }
        - name: username
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/Mode'
        - $ref: '#/components/parameters/Live'
      responses:
        '200':
          description: Platform profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '202':
          description: Background fetch queued (cache miss)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
        '501': { $ref: '#/components/responses/NotImplemented' }

  /v1/brand-safety:
    post:
      tags: [Safety]
      summary: Brand safety evaluation
      description: Evaluate brand safety for a creator or a specific post. Supports live mode.
      operationId: brandSafety
      x-mint:
        metadata:
          title: 'Brand Safety Evaluation'
          description: 'Assess brand safety for creators or posts using AI analysis'
        content: |
          ## Overview

          Evaluate the brand safety of creators or specific posts using AI-powered analysis. This endpoint helps brands assess potential risks before partnerships.

          <Warning>
          Brand safety analysis may take time for live mode requests. Use webhooks for async processing.
          </Warning>

          ## Target Types

          - **creator**: Analyze a creator's overall brand safety
          - **post**: Analyze a specific post for brand safety
          - **social_account**: Analyze a social media account

          ## Response Types

          - **Immediate**: Returns cached analysis results
          - **Job-based**: Returns job ID for live analysis (use webhook or polling)
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandSafetyRequest'
      responses:
        '200':
          description: Brand safety result (immediate for cached, job info for live mode)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/BrandSafetyResponse'
                  - $ref: '#/components/schemas/BrandSafetyJobResponse'
        '202':
          description: Live job queued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandSafetyJobResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
        '501': { $ref: '#/components/responses/NotImplemented' }

  /v1/jobs:
    get:
      tags: [Jobs]
      summary: List client jobs
      description: Get a paginated list of jobs for the authenticated client
      operationId: listJobs
      security:
        - ApiKeyAuth: []
      parameters:
        - name: status
          in: query
          description: Filter jobs by status
          schema:
            type: string
            enum: [queued, processing, completed, failed, cancelled]
        - name: limit
          in: query
          description: Number of jobs to return (max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of jobs to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  total:
                    type: integer
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }

  /v1/jobs/{job_id}:
    get:
      tags: [Jobs]
      summary: Get job status
      description: Get the current status and result of a specific job
      operationId: getJob
      security:
        - ApiKeyAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          description: The job identifier
          schema:
            type: string
      responses:
        '200':
          description: Job status and result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
    delete:
      tags: [Jobs]
      summary: Cancel job
      description: Cancel a queued job (only queued jobs can be cancelled)
      operationId: cancelJob
      security:
        - ApiKeyAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          description: The job identifier
          schema:
            type: string
      responses:
        '200':
          description: Job cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                  status:
                    type: string
                    enum: [cancelled]
                  message:
                    type: string
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }

  /v1/lookalike:
    post:
      tags: [Search]
      summary: Similar creators (lookalike)
      description: Given one or more seed creators, returns a ranked list of similar creators.
      operationId: lookalikeCreators
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookalikeRequest'
      responses:
        '200':
          description: Lookalike results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookalikeResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
        '501': { $ref: '#/components/responses/NotImplemented' }

  /v1/creators/{id}:
    get:
      tags: [Enrichment]
      summary: Get creator by ID
      operationId: getCreatorById
      description: |
        Returns creator details by id. Hidden creators are excluded from this endpoint.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
        - $ref: '#/components/parameters/Mode'
        - $ref: '#/components/parameters/Live'
      responses:
        '200':
          description: Creator details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailResponse'
        '202':
          description: Background fetch queued (cache miss)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
        '501': { $ref: '#/components/responses/NotImplemented' }

  /v1/creators/{platform}/{username}:
    get:
      tags: [Enrichment]
      summary: Get creator by platform and username
      operationId: getCreatorByHandle
      description: |
        Returns creator details using platform+username. Hidden creators are excluded from this endpoint.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: platform
          in: path
          required: true
          schema: { $ref: '#/components/schemas/Platform' }
        - name: username
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/Mode'
        - $ref: '#/components/parameters/Live'
      responses:
        '200':
          description: Creator details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }

  /v1/match:
    post:
      tags: [Match]
      summary: Match scoring for one or more creators against an intent or campaign
      operationId: matchScore
      x-mint:
        metadata:
          title: 'Match Scoring'
          description: 'Score creators against campaign requirements using AI matching'
        content: |
          ## Overview

          Score one or more creators against a campaign brief or search intent using AI-powered matching algorithms.

          <Info>
          Match scores range from 0.0 to 1.0, with higher scores indicating better alignment with your campaign requirements.
          </Info>

          ## Scoring Factors

          The AI considers multiple factors including:
          - Content relevance and quality
          - Audience demographics alignment
          - Engagement patterns
          - Brand safety indicators
          - Historical performance

          ## Decision Categories

          - **good**: Strong match, recommended for partnership
          - **neutral**: Moderate match, consider with caution
          - **avoid**: Poor match, not recommended
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchRequest'
      responses:
        '200':
          description: Match results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
        '501': { $ref: '#/components/responses/NotImplemented' }

  /v1/posts/analyze:
    post:
      tags: [Posts]
      summary: Analyze a post
      description: Analyze a single Instagram post (by URL or identifiers) and return AI analysis and extracted signals. Supports lite vs detailed via `mode`.
      operationId: analyzePost
      x-mint:
        metadata:
          title: 'Analyze Post'
          description: 'Get AI-powered analysis of Instagram posts including content insights and brand safety'
        content: |
          ## Overview

          Analyze individual Instagram posts to extract content insights, brand safety ratings, and engagement signals using AI.

          <Info>
          You can provide either a post URL or platform-specific ID to analyze the post.
          </Info>

          ## Analysis Modes

          - **lite**: Basic analysis with key metrics (default)
          - **detailed**: Comprehensive analysis with additional insights

          ## Extracted Signals

          The analysis includes:
          - Content topics and themes
          - Brand safety rating (A, B, C)
          - Call-to-action detection
          - Product mentions
          - Hashtag and mention analysis
          - Engagement metrics
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAnalysisRequest'
      responses:
        '200':
          description: Post analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAnalysisResponse'
        '202':
          description: Background fetch queued (cache miss)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
        '501': { $ref: '#/components/responses/NotImplemented' }

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    Limit:
      name: limit
      in: query
      required: false
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
      description: Page size. Billing is 1 unit per page of up to 50 results.
    Cursor:
      name: cursor
      in: query
      required: false
      schema: { type: string, description: Opaque pagination cursor }
    Mode:
      name: mode
      in: query
      required: false
      schema:
        type: string
        enum: [lite, detailed]
        default: lite
    Live:
      name: live
      in: query
      required: false
      schema:
        type: boolean
        default: false
      description: When true, fetches fresh scraped data at request time (slower, premium cost)

  headers:
    X-Request-Id:
      description: Request correlation identifier
      schema: { type: string }
    RateLimit-Limit:
      description: The rate limit ceiling for that given request
      schema: { type: integer }
    RateLimit-Remaining:
      description: The number of requests left for the time window
      schema: { type: integer }
    RateLimit-Reset:
      description: The remaining window before the rate limit resets in UTC epoch seconds
      schema: { type: integer }

  responses:
    BadRequest:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: API key missing or invalid
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    RateLimited:
      description: Rate limit exceeded
      headers:
        RateLimit-Limit:
          $ref: '#/components/headers/RateLimit-Limit'
        RateLimit-Remaining:
          $ref: '#/components/headers/RateLimit-Remaining'
        RateLimit-Reset:
          $ref: '#/components/headers/RateLimit-Reset'
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotImplemented:
      description: Not implemented or temporarily unavailable
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    Platform:
      type: string
      enum: [instagram]

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            request_id: { type: string, format: uuid }
          required: [code, message]
      required: [error]

    SearchRequest:
      type: object
      properties:
        query: { type: string, description: Free-text intent }
        filters:
          type: object
          properties:
            platform:
              type: array
              items: { $ref: '#/components/schemas/Platform' }
            min_followers: { type: integer, minimum: 0 }
            max_followers: { type: integer, minimum: 0 }
            engagement_rate:
              type: object
              properties:
                min: { type: number, minimum: 0, maximum: 1 }
                max: { type: number, minimum: 0, maximum: 1 }
            growth_rate:
              type: object
              properties:
                min: { type: number }
                max: { type: number }
            verified: { type: boolean }
        mode:
          type: string
          enum: [lite, rich]
          default: lite
        result_scope:
          type: string
          enum: [seed_platform, all_platforms]
          default: seed_platform
          description: seed_platform returns only the requested platform; all_platforms returns all known platform data (currently 1x multiplier)
      additionalProperties: false
      required: [query]

    ProfileLite:
      type: object
      properties:
        platform: { $ref: '#/components/schemas/Platform' }
        username: { type: string }
        follower_count: { type: integer }
        engagement_rate: { type: number, minimum: 0, maximum: 1 }
        verified: { type: boolean }
        avatar_url: { type: string, format: uri }

    InstagramProfileLite:
      type: object
      description: Instagram profile fields (lite)
      properties:
        platform: { $ref: '#/components/schemas/Platform' }
        username: { type: string }
        follower_count: { type: integer }
        engagement_rate: { type: number, minimum: 0, maximum: 1 }
        verified: { type: boolean }
        avatar_url: { type: string, format: uri }
        external_url: { type: string, format: uri }
        posts_per_week: { type: number }
        avg_likes: { type: integer }

    InstagramProfileRich:
      allOf:
        - $ref: '#/components/schemas/InstagramProfileLite'
        - type: object
          description: Additional Instagram fields returned in rich mode
          properties:
            last_posted_at: { type: string, format: date-time }
            media_count_30d: { type: integer }
            avg_likes_30d: { type: number }

    SearchItem:
      type: object
      properties:
        id: { type: string, format: uuid }
        platform: { $ref: '#/components/schemas/Platform' }
        username: { type: string }
        name: { type: string }
        avatar_url: { type: string, format: uri }
        follower_count: { type: integer }
        engagement_rate: { type: number, minimum: 0, maximum: 1 }
        niche_tagline: { type: string }
        ai_recommendation:
          type: object
          properties:
            score: { type: number, minimum: 0, maximum: 1 }
            explanation: { type: string }
        content_preview:
          type: array
          items:
            type: object
            properties:
              image: { type: string, format: uri }
              posted_at: { type: string, format: date-time }
              engagement_rate: { type: number, minimum: 0, maximum: 1 }
              likes: { type: integer }
        profiles:
          type: array
          description: Nested profiles for this creator. The first element is the primary profile. When result_scope=all_platforms, this may include profiles for other platforms.
          items:
            oneOf:
              - $ref: '#/components/schemas/InstagramProfileLite'
              - $ref: '#/components/schemas/InstagramProfileRich'

    SearchResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/SearchItem' }
        filtered_total: { type: integer }
        has_more: { type: boolean }
        next_cursor: { type: string }
      required: [items, filtered_total, has_more]

    LookalikeSeed:
      type: object
      properties:
        id: { type: string, format: uuid }
        platform: { $ref: '#/components/schemas/Platform' }
        username: { type: string }
        weight:
          type: number
          minimum: 0
          exclusiveMinimum: true
          default: 1
          description: Optional positive weight for this seed when computing the centroid; defaults to 1 (equal weighting)
      description: Provide either id, or platform+username

    LookalikeRequest:
      type: object
      properties:
        seeds:
          type: array
          minItems: 1
          items: { $ref: '#/components/schemas/LookalikeSeed' }
        filters:
          type: object
          properties:
            platform:
              type: array
              items: { $ref: '#/components/schemas/Platform' }
            min_followers: { type: integer, minimum: 0 }
            max_followers: { type: integer, minimum: 0 }
        mode:
          type: string
          enum: [lite, rich]
          default: lite
        result_scope:
          type: string
          enum: [seed_platform, all_platforms]
          default: seed_platform
          description: seed_platform keeps only the seed platform; all_platforms returns multi-platform data (currently 1x multiplier)
        live:
          type: boolean
          default: false
          description: When true, fetches fresh scraped data at request time (slower, premium cost)
      required: [seeds]

    BrandSafetyRequest:
      type: object
      properties:
        target:
          type: object
          properties:
            type:
              type: string
              enum: [post, social_account, creator]
            id:
              type: string
              format: uuid
            platform:
              type: string
            username:
              type: string
            post_url:
              type: string
              format: uri
            post_id:
              type: string
          required: [type]
        live:
          type: boolean
          default: false
          description: 'Enable live mode for fresh data scraping (not supported for posts)'
        options:
          type: object
          properties:
            force_refresh:
              type: boolean
              default: false
            include_evidence:
              type: boolean
              default: true
            webhook_url:
              type: string
              format: uri
              description: 'Webhook URL for job completion notifications'
      required: [target]

    BrandSafetyJobResponse:
      type: object
      properties:
        target:
          type: object
          properties:
            type:
              type: string
              enum: [post, social_account, creator]
            id:
              type: string
            platform:
              type: string
            username:
              type: string
            post_url:
              type: string
              format: uri
        report:
          type: object
          nullable: true
          description: 'Brand safety report (null for live jobs)'
        cached:
          type: boolean
          default: false
        processing_time_ms:
          type: integer
        job_id:
          type: string
          description: 'Job identifier for polling'
        status:
          type: string
          enum: [queued]
          description: 'Job status'
        estimated_completion:
          type: string
          format: date-time
          description: 'Estimated completion time'

    JobSummary:
      type: object
      properties:
        job_id:
          type: string
          description: Unique job identifier
        endpoint:
          type: string
          description: API endpoint that created the job
        status:
          type: string
          enum: [queued, processing, completed, failed, cancelled]
        progress:
          type: number
          minimum: 0
          maximum: 1
          description: Job progress from 0.0 to 1.0
        target_type:
          type: string
          description: Type of target being processed
        target_id:
          type: string
          description: ID of the target being processed
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    JobStatus:
      type: object
      properties:
        job_id:
          type: string
          description: Unique job identifier
        status:
          type: string
          enum: [queued, processing, completed, failed, cancelled]
        progress:
          type: number
          minimum: 0
          maximum: 1
          description: Job progress from 0.0 to 1.0
        result:
          type: object
          description: Job result when completed
        error:
          type: object
          description: Error details when failed
        created_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    WebhookNotification:
      type: object
      properties:
        job_id:
          type: string
          description: 'Job identifier'
        status:
          type: string
          enum: [completed, failed, cancelled]
          description: 'Final job status'
        result:
          type: object
          description: 'Job result when completed'
        error:
          type: object
          description: 'Error details when failed'
        timestamp:
          type: string
          format: date-time
          description: 'Notification timestamp'
      required: [job_id, status, timestamp]

    FlagDetail:
      type: object
      properties:
        rating: { type: string, enum: [A, B, C] }
        notes: { type: string }

    BrandSafetyResponse:
      type: object
      properties:
        target:
          type: object
          properties:
            type: { type: string, enum: [creator, post] }
            id: { type: string }
            platform: { $ref: '#/components/schemas/Platform' }
            username: { type: string }

    LookalikeItem:
      allOf:
        - $ref: '#/components/schemas/SearchItem'
        - type: object
          properties:
            similarity: { type: number, minimum: 0, maximum: 1 }

    LookalikeResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/LookalikeItem' }
        filtered_total: { type: integer }
        has_more: { type: boolean }
        next_cursor: { type: string }
      required: [items, filtered_total, has_more]

    CreatorDetailLite:
      type: object
      properties:
        id: { type: string, format: uuid }
        platform: { $ref: '#/components/schemas/Platform' }
        username: { type: string }
        name: { type: string }
        avatar_url: { type: string, format: uri }
        bio: { type: string }
        follower_count: { type: integer }
        engagement_rate: { type: number, minimum: 0, maximum: 1 }
        avg_likes: { type: integer }
        ai_one_line_bio: { type: string }
        verified: { type: boolean }
        country: { type: string }
        content_preview:
          type: array
          items:
            type: object
            properties:
              image: { type: string, format: uri }
              posted_at: { type: string, format: date-time }
              engagement_rate: { type: number, minimum: 0, maximum: 1 }
              likes: { type: integer }
        profiles:
          type: array
          description: Multi-platform profiles for this creator. The first element is the primary profile.
          items:
            oneOf:
              - $ref: '#/components/schemas/InstagramProfileLite'
              - $ref: '#/components/schemas/InstagramProfileRich'

    CreatorDetailDetailed:
      allOf:
        - $ref: '#/components/schemas/CreatorDetailLite'
        - type: object
          properties:
            emails:
              type: array
              items:
                type: object
                properties:
                  email: { type: string, format: email }
                  source: { type: string, enum: [profile, post, third_party] }
                  validated: { type: boolean }
            contact:
              type: object
              properties:
                business_category: { type: string }
                external_url: { type: string, format: uri }
            metrics:
              type: object
              properties:
                growth_30d: { type: number }
                growth_90d: { type: number }
                post_frequency_30d: { type: number }

    CreatorDetailResponse:
      oneOf:
        - $ref: '#/components/schemas/CreatorDetailLite'
        - $ref: '#/components/schemas/CreatorDetailDetailed'

    ProfileResponse:
      oneOf:
        - $ref: '#/components/schemas/InstagramProfileLite'
        - $ref: '#/components/schemas/InstagramProfileRich'

    MatchRequest:
      type: object
      properties:
        creators:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              id: { type: string, format: uuid }
              platform: { $ref: '#/components/schemas/Platform' }
              username: { type: string }
            description: Provide either id, or platform+username
        search_intent:
          type: object
          properties:
            query: { type: string }
            context: { type: string }
        live:
          type: boolean
          default: false
          description: When true, fetches fresh scraped data at request time (slower, premium cost)
      required: [creators]

    MatchItem:
      type: object
      properties:
        creator:
          type: object
          properties:
            id: { type: string, format: uuid }
            platform: { $ref: '#/components/schemas/Platform' }
            username: { type: string }
        match_score: { type: number, minimum: 0, maximum: 1 }
        decision: { type: string, enum: [good, neutral, avoid] }
        explanation: { type: string }
        evidence:
          type: array
          items: { type: string }

    MatchResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/MatchItem' }

    PostAnalysisRequest:
      type: object
      properties:
        platform: { $ref: '#/components/schemas/Platform' }
        url: { type: string, format: uri, description: Instagram post URL }
        id: { type: string, description: Platform-specific id or shortcode }
        live:
          type: boolean
          default: false
          description: When true, fetches fresh scraped data at request time (slower, premium cost)
        mode:
          type: string
          enum: [lite, detailed]
          default: lite
      anyOf:
        - required: [platform, url]
        - required: [platform, id]

    PostAnalysisResponse:
      type: object
      properties:
        platform: { $ref: '#/components/schemas/Platform' }
        id: { type: string }
        is_video: { type: boolean }
        caption: { type: string }
        hashtags:
          type: array
          items: { type: string }
        mentions:
          type: array
          items: { type: string }
        media_urls:
          type: array
          items: { type: string, format: uri }
        like_count: { type: integer }
        comment_count: { type: integer }
        view_count: { type: integer }
        posted_at: { type: string, format: date-time }
        analysis:
          type: object
          properties:
            summary: { type: string }
            topics:
              type: array
              items: { type: string }
            brand_safety:
              type: object
              properties:
                rating: { type: string, enum: [A, B, C] }
                notes: { type: string }
            calls_to_action:
              type: array
              items: { type: string }
            products:
              type: array
              items: { type: string }
